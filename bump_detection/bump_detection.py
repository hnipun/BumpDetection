import math
import sys
import numpy as np

# basis matrix for the wavelet transformation
wavelet_basis = np.array([
    [0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
     0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
     0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
     0.1767767, 0.1767767],
    [0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.7071068, -0.7071068],
    [0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000,
     -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000,
     -0.5000000, -0.5000000],
    [0.3535534, 0.3535534, 0.3535534, 0.3535534, -0.3535534, -0.3535534, -0.3535534, -0.3535534, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.3535534, 0.3535534,
     0.3535534, 0.3535534, -0.3535534, -0.3535534, -0.3535534, -0.3535534, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.3535534, 0.3535534, 0.3535534, 0.3535534,
     -0.3535534, -0.3535534, -0.3535534, -0.3535534, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.3535534, 0.3535534, 0.3535534, 0.3535534, -0.3535534, -0.3535534,
     -0.3535534, -0.3535534],
    [0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, -0.2500000, -0.2500000,
     -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000],
    [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
     0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.2500000, 0.2500000, 0.2500000, 0.2500000,
     0.2500000, 0.2500000, 0.2500000, 0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000,
     -0.2500000, -0.2500000, -0.2500000],
    [0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
     0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, -0.1767767, -0.1767767, -0.1767767,
     -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767,
     -0.1767767, -0.1767767, -0.1767767, -0.1767767], ])

A = [[0.4902, -0.1373],
     [-0.1373, 0.0784], ]

level4_index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
level3_index = [17, 18, 19, 20, 21, 22, 23, 24]
columns = [0]

min_value = -sys.maxsize - 1


# return the bump value and error value
def bump_detection(s: list):
    alpha = -10  # Lipschitz exponent
    signal = np.zeros((32, 1))  # 2D array for the input
    bump = False

    # Convert the input into 2D array
    for i in range(len(s)):
        signal[i][0] = s[i - 1]

    #  Wavelet transformation
    transformed = wavelet_basis.dot(signal)

    level_4_dwt = _get_abs(transformed[np.ix_([0], level4_index)])
    level_3_dwt = _get_abs(transformed[np.ix_([0], level3_index)])

    maxima_l4_arr = _max_peaks(level_4_dwt)
    maxima_l4 = maxima_l4_arr[0]
    maxima_l4_pos = maxima_l4_arr[1]

    maxima_l3 = min_value
    if maxima_l4 != min_value:
        maxima_l3 = _neighbor_maxima(level_3_dwt, maxima_l4_pos)

    # calculate alpha
    if maxima_l4 != min_value and maxima_l3 != min_value:
        alpha = A[1][0] * (math.log(maxima_l4) / math.log(2) + math.log(maxima_l3) / math.log(2)) + self.A[1][
            1] * 7 * (math.log(maxima_l4) / math.log(2) + math.log(maxima_l3) / math.log(2))

    if alpha > -3.8:
        bump = True

    noise_level = _mad(transformed[np.ix_([0], level4_index)]) / 0.6745

    return bump, noise_level


def _max_peaks(arrr: list) -> tuple:
    n = len(arrr)
    arr = []
    max_value = -1 * math.inf
    max_position = -1 * math.inf

    # set corner values to -infinity
    arr[0] = math.inf
    arr[n + 1] = math.inf

    for i in range(n + 1):
        arr[i] = arrr[i - 1]

    # find all peak elements
    for i in range(n + 1):
        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:
            if arr[i] > max_value:
                max_value = arr[i]
                max_position = i / 16.0

    return max_value, max_position


def _neighbor_maxima(arrr: list, maxima_l4_pos: float) -> list:
    n = len(arrr)
    arr = []
    min_pos = math.inf
    maxima = 0

    # set corner values to -infinity
    arr[0] = math.inf
    arr[n + 1] = math.inf

    for i in range(n + 1):
        arr[i] = arrr[i - 1]

    # find all peak elements
    for i in range(n + 1):
        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:
            rel_pos = abs(i / 8.0 - maxima_l4_pos)
            if rel_pos < min_pos:
                min_pos = rel_pos
                maxima = arr[i]

    return maxima


# returns the absolute values of the vector
def _get_abs(arrr: list) -> list:
    n = len(arrr)
    for i in range(n):
        arrr[i] = abs(arrr[i])

    return arrr


# returns the median absolute deviation(MAD)
def _mad(arrr: list) -> float:
    n = len(arrr)
    arr = []
    median = _median(arrr)

    for i in range(n + 1):
        arr[i] = abs(arrr[i] - median)

    return _median(arr)


# returns the median value of the given array
def _median(arrr: list) -> float:
    n = len(arrr)
    s = sorted(arrr)

    return (sum(s[n // 2 - 1:n // 2 + 1]) / 2.0, s[n // 2])[n % 2] if n else None
