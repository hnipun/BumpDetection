import math
import numpy as np


class BumpDetection:
    # Basis matrix for the wavelet transformation
    wavelet_basis = np.array([
        [0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
         0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
         0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
         0.1767767, 0.1767767],
        [0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7071068, -0.7071068,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.7071068, -0.7071068],
        [0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000,
         -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000, -0.5000000, -0.5000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.5000000, 0.5000000,
         -0.5000000, -0.5000000],
        [0.3535534, 0.3535534, 0.3535534, 0.3535534, -0.3535534, -0.3535534, -0.3535534, -0.3535534, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.3535534, 0.3535534,
         0.3535534, 0.3535534, -0.3535534, -0.3535534, -0.3535534, -0.3535534, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.3535534, 0.3535534, 0.3535534, 0.3535534,
         -0.3535534, -0.3535534, -0.3535534, -0.3535534, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.3535534, 0.3535534, 0.3535534, 0.3535534, -0.3535534, -0.3535534,
         -0.3535534, -0.3535534],
        [0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, 0.2500000, -0.2500000, -0.2500000,
         -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000],
        [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000,
         0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.2500000, 0.2500000, 0.2500000, 0.2500000,
         0.2500000, 0.2500000, 0.2500000, 0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000,
         -0.2500000, -0.2500000, -0.2500000],
        [0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767,
         0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, 0.1767767, -0.1767767, -0.1767767, -0.1767767,
         -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767, -0.1767767,
         -0.1767767, -0.1767767, -0.1767767, -0.1767767], ])

    # Return the bump value and error value
    def bump_detection(self, s: list):
        result = []
        alpha = -10  # Lipschitz exponent
        signal = np.zeros((32, 1))  # 2D array for the input
        A = [[0.4902, -0.1373],
             [-0.1373, 0.0784], ]
        bump = False

        # Convert the input into 2D array
        for i in range(len(s)):
            signal[i] = s[i - 1]

        #  Wavelet transformation
        transformed = self.wavelet_basis.dot(signal)

        level4_index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
        level3_index = [17, 18, 19, 20, 21, 22, 23, 24]
        colums = [0]

    def _max_peaks(self, arrr: list) -> tuple:
        n = len(arrr)
        arr = []
        max_value = -math.inf
        max_position = -math.inf

        # set corner values to -infinity
        arr[0] = math.inf
        arr[n + 1] = math.inf

        for i in range(n + 1):
            arr[i] = arrr[i - 1]

        # Find All Peak Elements
        for i in range(n + 1):
            if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:
                if arr[i] > max_value:
                    max_value = arr[i]
                    max_position = i / 16.0

        return max_value, max_position

    def _neighbor_maxima(self, arrr: list, maxima_l4_pos: float):
        n = len(arrr)
        arr = []
        min_pos = math.inf
        maxima = 0

        # set corner values to -infinity
        arr[0] = math.inf
        arr[n + 1] = math.inf

        for i in range(n + 1):
            arr[i] = arrr[i - 1]

        # Find All Peak Elements
        for i in range(n + 1):
            if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:
                rel_pos = abs(i / 8.0 - maxima_l4_pos)
                if rel_pos < min_pos:
                    min_pos = rel_pos
                    maxima = arr[i]

        return maxima

    # Returns the absolute values of the vector
    def _get_abs(self, arrr: list):
        n = len(arrr)
        for i in range(n):
            arrr[i] = abs(arrr[i])

        return arrr

    # Returns the meadian absolute deviation(MAD)
    def _mad(self, arrr: list):
        n = len(arrr)
        arr = []
        median = math.median(arrr)


    # Returns the meadian value of the given array
    #     def median(arrr) {
    #         Arrays.sort(arrr);
    #         double median = 0;
    #         if (arrr.length % 2 == 0) {
    #             median = ((double) arrr[arrr.length / 2] + (double) arrr[arrr.length / 2 - 1]) / 2;
    #         } else {
    #             median = (double) arrr[arrr.length / 2];
    #         }
    #         return median;
    #     }
